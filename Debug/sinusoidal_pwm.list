
sinusoidal_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ffc  08004ffc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ffc  08004ffc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ffc  08004ffc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000264  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000100d7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021d9  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e28  00000000  00000000  00032330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b13  00000000  00000000  00033158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020542  00000000  00000000  00033c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011aba  00000000  00000000  000541ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8179  00000000  00000000  00065c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b94  00000000  00000000  0012dde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00131974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004d9c 	.word	0x08004d9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004d9c 	.word	0x08004d9c

080001d4 <start_pwm>:
static void MX_USART2_UART_Init(void);
static void MX_DAC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void start_pwm(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001d8:	2100      	movs	r1, #0
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <start_pwm+0x20>)
 80001dc:	f002 ffb6 	bl	800314c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80001e0:	2108      	movs	r1, #8
 80001e2:	4804      	ldr	r0, [pc, #16]	; (80001f4 <start_pwm+0x20>)
 80001e4:	f002 ffb2 	bl	800314c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80001e8:	210c      	movs	r1, #12
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <start_pwm+0x20>)
 80001ec:	f002 ffae 	bl	800314c <HAL_TIM_PWM_Start>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000080 	.word	0x20000080

080001f8 <configure_dma>:

void configure_dma(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    HAL_DMA_Start(&hdma_tim1_ch1, (uint32_t)sin_table_phaseA, (uint32_t)&TIM1->CCR1, TABLE_SIZE);
 80001fc:	4915      	ldr	r1, [pc, #84]	; (8000254 <configure_dma+0x5c>)
 80001fe:	2332      	movs	r3, #50	; 0x32
 8000200:	4a15      	ldr	r2, [pc, #84]	; (8000258 <configure_dma+0x60>)
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <configure_dma+0x64>)
 8000204:	f000 ff67 	bl	80010d6 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim1_ch3, (uint32_t)sin_table_phaseB, (uint32_t)&TIM1->CCR3, TABLE_SIZE);
 8000208:	4915      	ldr	r1, [pc, #84]	; (8000260 <configure_dma+0x68>)
 800020a:	2332      	movs	r3, #50	; 0x32
 800020c:	4a15      	ldr	r2, [pc, #84]	; (8000264 <configure_dma+0x6c>)
 800020e:	4816      	ldr	r0, [pc, #88]	; (8000268 <configure_dma+0x70>)
 8000210:	f000 ff61 	bl	80010d6 <HAL_DMA_Start>
    HAL_DMA_Start(&hdma_tim1_ch4_trig_com, (uint32_t)sin_table_phaseC, (uint32_t)&TIM1->CCR4, TABLE_SIZE);
 8000214:	4915      	ldr	r1, [pc, #84]	; (800026c <configure_dma+0x74>)
 8000216:	2332      	movs	r3, #50	; 0x32
 8000218:	4a15      	ldr	r2, [pc, #84]	; (8000270 <configure_dma+0x78>)
 800021a:	4816      	ldr	r0, [pc, #88]	; (8000274 <configure_dma+0x7c>)
 800021c:	f000 ff5b 	bl	80010d6 <HAL_DMA_Start>

    __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <configure_dma+0x80>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	68da      	ldr	r2, [r3, #12]
 8000226:	4b14      	ldr	r3, [pc, #80]	; (8000278 <configure_dma+0x80>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800022e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC3);
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <configure_dma+0x80>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	68da      	ldr	r2, [r3, #12]
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <configure_dma+0x80>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800023e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC4);
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <configure_dma+0x80>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68da      	ldr	r2, [r3, #12]
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <configure_dma+0x80>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800024e:	60da      	str	r2, [r3, #12]
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	08004db4 	.word	0x08004db4
 8000258:	40012c34 	.word	0x40012c34
 800025c:	20000118 	.word	0x20000118
 8000260:	08004e7c 	.word	0x08004e7c
 8000264:	40012c3c 	.word	0x40012c3c
 8000268:	2000015c 	.word	0x2000015c
 800026c:	08004f20 	.word	0x08004f20
 8000270:	40012c40 	.word	0x40012c40
 8000274:	200001a0 	.word	0x200001a0
 8000278:	20000080 	.word	0x20000080

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 fcfc 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f812 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 fa16 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800028c:	f000 f9de 	bl	800064c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f9ac 	bl	80005ec <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000294:	f000 f86e 	bl	8000374 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000298:	f000 f95a 	bl	8000550 <MX_TIM2_Init>
  MX_TIM1_Init();
 800029c:	f000 f894 	bl	80003c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sineLookupTable1, 50, DAC_ALIGN_12B_R);
  //HAL_TIM_Base_Start(&htim2);
  //int indx = 0;
  start_pwm();
 80002a0:	f7ff ff98 	bl	80001d4 <start_pwm>
  configure_dma();
 80002a4:	f7ff ffa8 	bl	80001f8 <configure_dma>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x2c>
	...

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b0a6      	sub	sp, #152	; 0x98
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f004 fd41 	bl	8004d42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2258      	movs	r2, #88	; 0x58
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f004 fd33 	bl	8004d42 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	2302      	movs	r3, #2
 80002de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	2310      	movs	r3, #16
 80002e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800030a:	4618      	mov	r0, r3
 800030c:	f001 f9d4 	bl	80016b8 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000316:	f000 fa35 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2302      	movs	r3, #2
 8000320:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000330:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fa12 	bl	8002760 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000342:	f000 fa1f 	bl	8000784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <SystemClock_Config+0xc4>)
 8000348:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800034e:	2300      	movs	r3, #0
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000352:	2300      	movs	r3, #0
 8000354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f002 fc21 	bl	8002ba0 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000364:	f000 fa0e 	bl	8000784 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3798      	adds	r7, #152	; 0x98
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	00101002 	.word	0x00101002

08000374 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_DAC1_Init+0x4c>)
 8000386:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <MX_DAC1_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <MX_DAC1_Init+0x4c>)
 800038c:	f000 fded 	bl	8000f6a <HAL_DAC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000396:	f000 f9f5 	bl	8000784 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800039a:	2324      	movs	r3, #36	; 0x24
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_DAC1_Init+0x4c>)
 80003aa:	f000 fe00 	bl	8000fae <HAL_DAC_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80003b4:	f000 f9e6 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40007400 	.word	0x40007400

080003c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b09a      	sub	sp, #104	; 0x68
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]
 80003fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	222c      	movs	r2, #44	; 0x2c
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f004 fc9d 	bl	8004d42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000408:	4b4f      	ldr	r3, [pc, #316]	; (8000548 <MX_TIM1_Init+0x180>)
 800040a:	4a50      	ldr	r2, [pc, #320]	; (800054c <MX_TIM1_Init+0x184>)
 800040c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800040e:	4b4e      	ldr	r3, [pc, #312]	; (8000548 <MX_TIM1_Init+0x180>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b4c      	ldr	r3, [pc, #304]	; (8000548 <MX_TIM1_Init+0x180>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1438;
 800041a:	4b4b      	ldr	r3, [pc, #300]	; (8000548 <MX_TIM1_Init+0x180>)
 800041c:	f240 529e 	movw	r2, #1438	; 0x59e
 8000420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000422:	4b49      	ldr	r3, [pc, #292]	; (8000548 <MX_TIM1_Init+0x180>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000428:	4b47      	ldr	r3, [pc, #284]	; (8000548 <MX_TIM1_Init+0x180>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042e:	4b46      	ldr	r3, [pc, #280]	; (8000548 <MX_TIM1_Init+0x180>)
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000434:	4844      	ldr	r0, [pc, #272]	; (8000548 <MX_TIM1_Init+0x180>)
 8000436:	f002 fdd1 	bl	8002fdc <HAL_TIM_Base_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000440:	f000 f9a0 	bl	8000784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000448:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800044a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800044e:	4619      	mov	r1, r3
 8000450:	483d      	ldr	r0, [pc, #244]	; (8000548 <MX_TIM1_Init+0x180>)
 8000452:	f003 f99d 	bl	8003790 <HAL_TIM_ConfigClockSource>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800045c:	f000 f992 	bl	8000784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000460:	4839      	ldr	r0, [pc, #228]	; (8000548 <MX_TIM1_Init+0x180>)
 8000462:	f002 fe12 	bl	800308a <HAL_TIM_PWM_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800046c:	f000 f98a 	bl	8000784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000474:	2300      	movs	r3, #0
 8000476:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800047c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000480:	4619      	mov	r1, r3
 8000482:	4831      	ldr	r0, [pc, #196]	; (8000548 <MX_TIM1_Init+0x180>)
 8000484:	f003 fef0 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800048e:	f000 f979 	bl	8000784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000492:	2360      	movs	r3, #96	; 0x60
 8000494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049a:	2300      	movs	r3, #0
 800049c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800049e:	2300      	movs	r3, #0
 80004a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004a6:	2300      	movs	r3, #0
 80004a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004aa:	2300      	movs	r3, #0
 80004ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b2:	2200      	movs	r2, #0
 80004b4:	4619      	mov	r1, r3
 80004b6:	4824      	ldr	r0, [pc, #144]	; (8000548 <MX_TIM1_Init+0x180>)
 80004b8:	f003 f856 	bl	8003568 <HAL_TIM_PWM_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80004c2:	f000 f95f 	bl	8000784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ca:	2208      	movs	r2, #8
 80004cc:	4619      	mov	r1, r3
 80004ce:	481e      	ldr	r0, [pc, #120]	; (8000548 <MX_TIM1_Init+0x180>)
 80004d0:	f003 f84a 	bl	8003568 <HAL_TIM_PWM_ConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80004da:	f000 f953 	bl	8000784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004e2:	220c      	movs	r2, #12
 80004e4:	4619      	mov	r1, r3
 80004e6:	4818      	ldr	r0, [pc, #96]	; (8000548 <MX_TIM1_Init+0x180>)
 80004e8:	f003 f83e 	bl	8003568 <HAL_TIM_PWM_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80004f2:	f000 f947 	bl	8000784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800050a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800050e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4619      	mov	r1, r3
 800052a:	4807      	ldr	r0, [pc, #28]	; (8000548 <MX_TIM1_Init+0x180>)
 800052c:	f003 ff28 	bl	8004380 <HAL_TIMEx_ConfigBreakDeadTime>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000536:	f000 f925 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <MX_TIM1_Init+0x180>)
 800053c:	f000 fa8c 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 8000540:	bf00      	nop
 8000542:	3768      	adds	r7, #104	; 0x68
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000080 	.word	0x20000080
 800054c:	40012c00 	.word	0x40012c00

08000550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <MX_TIM2_Init+0x98>)
 8000570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000574:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <MX_TIM2_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_TIM2_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1438;
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <MX_TIM2_Init+0x98>)
 8000584:	f240 529e 	movw	r2, #1438	; 0x59e
 8000588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_TIM2_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_TIM2_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <MX_TIM2_Init+0x98>)
 8000598:	f002 fd20 	bl	8002fdc <HAL_TIM_Base_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005a2:	f000 f8ef 	bl	8000784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <MX_TIM2_Init+0x98>)
 80005b4:	f003 f8ec 	bl	8003790 <HAL_TIM_ConfigClockSource>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005be:	f000 f8e1 	bl	8000784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005c2:	2320      	movs	r3, #32
 80005c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <MX_TIM2_Init+0x98>)
 80005d0:	f003 fe4a 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005da:	f000 f8d3 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000cc 	.word	0x200000cc

080005ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_USART2_UART_Init+0x58>)
 80005f2:	4a15      	ldr	r2, [pc, #84]	; (8000648 <MX_USART2_UART_Init+0x5c>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_USART2_UART_Init+0x58>)
 80005f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000630:	f003 ff4a 	bl	80044c8 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f8a3 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200001e4 	.word	0x200001e4
 8000648:	40004400 	.word	0x40004400

0800064c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_DMA_Init+0x68>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_DMA_Init+0x68>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_DMA_Init+0x68>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	200c      	movs	r0, #12
 8000670:	f000 fc45 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000674:	200c      	movs	r0, #12
 8000676:	f000 fc5e 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	200d      	movs	r0, #13
 8000680:	f000 fc3d 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000684:	200d      	movs	r0, #13
 8000686:	f000 fc56 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200e      	movs	r0, #14
 8000690:	f000 fc35 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000694:	200e      	movs	r0, #14
 8000696:	f000 fc4e 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f000 fc2d 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 fc46 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_GPIO_Init+0xc4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a2a      	ldr	r2, [pc, #168]	; (800077c <MX_GPIO_Init+0xc4>)
 80006d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_GPIO_Init+0xc4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_GPIO_Init+0xc4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <MX_GPIO_Init+0xc4>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_GPIO_Init+0xc4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_GPIO_Init+0xc4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a1e      	ldr	r2, [pc, #120]	; (800077c <MX_GPIO_Init+0xc4>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_GPIO_Init+0xc4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_GPIO_Init+0xc4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_GPIO_Init+0xc4>)
 800071c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_GPIO_Init+0xc4>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 ffa7 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000740:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_GPIO_Init+0xc8>)
 8000752:	f000 fe0f 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000756:	2320      	movs	r3, #32
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f000 fe00 	bl	8001374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x44>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c6:	2007      	movs	r0, #7
 80007c8:	f000 fb8e 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a2d      	ldr	r2, [pc, #180]	; (80008ac <HAL_DAC_MspInit+0xd4>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d153      	bne.n	80008a2 <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <HAL_DAC_MspInit+0xd8>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <HAL_DAC_MspInit+0xd8>)
 8000800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <HAL_DAC_MspInit+0xd8>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <HAL_DAC_MspInit+0xd8>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <HAL_DAC_MspInit+0xd8>)
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <HAL_DAC_MspInit+0xd8>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082a:	2310      	movs	r3, #16
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fd98 	bl	8001374 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_DAC_MspInit+0xe0>)
 8000848:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 800084c:	2210      	movs	r2, #16
 800084e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 800085e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000862:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 8000866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 800086e:	2220      	movs	r2, #32
 8000870:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 8000874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000878:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 800087c:	f000 fbe4 	bl	8001048 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8000886:	f7ff ff7d 	bl	8000784 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_DAC_MspInit+0xe4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_DAC_MspInit+0xe4>)
 8000890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000894:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <HAL_DAC_MspInit+0xdc>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40007400 	.word	0x40007400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	2000003c 	.word	0x2000003c
 80008b8:	40020030 	.word	0x40020030
 80008bc:	40010000 	.word	0x40010000

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a5a      	ldr	r2, [pc, #360]	; (8000a38 <HAL_TIM_Base_MspInit+0x178>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	f040 8094 	bne.w	80009fc <HAL_TIM_Base_MspInit+0x13c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008d4:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <HAL_TIM_Base_MspInit+0x17c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a58      	ldr	r2, [pc, #352]	; (8000a3c <HAL_TIM_Base_MspInit+0x17c>)
 80008da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b56      	ldr	r3, [pc, #344]	; (8000a3c <HAL_TIM_Base_MspInit+0x17c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 80008ee:	4a55      	ldr	r2, [pc, #340]	; (8000a44 <HAL_TIM_Base_MspInit+0x184>)
 80008f0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008f2:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 80008f4:	2210      	movs	r2, #16
 80008f6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000904:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800090c:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 800090e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000912:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 8000916:	2220      	movs	r2, #32
 8000918:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800091a:	4b49      	ldr	r3, [pc, #292]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 800091c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000920:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000922:	4847      	ldr	r0, [pc, #284]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 8000924:	f000 fb90 	bl	8001048 <HAL_DMA_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 800092e:	f7ff ff29 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
 8000938:	4a41      	ldr	r2, [pc, #260]	; (8000a40 <HAL_TIM_Base_MspInit+0x180>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 800093e:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000940:	4a42      	ldr	r2, [pc, #264]	; (8000a4c <HAL_TIM_Base_MspInit+0x18c>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000944:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000946:	2210      	movs	r2, #16
 8000948:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000964:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8000966:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000968:	2220      	movs	r2, #32
 800096a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800096c:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000974:	4834      	ldr	r0, [pc, #208]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000976:	f000 fb67 	bl	8001048 <HAL_DMA_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 8000980:	f7ff ff00 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a30      	ldr	r2, [pc, #192]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <HAL_TIM_Base_MspInit+0x188>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 8000992:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <HAL_TIM_Base_MspInit+0x194>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 8000998:	2210      	movs	r2, #16
 800099a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009ba:	2220      	movs	r2, #32
 80009bc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80009c6:	4822      	ldr	r0, [pc, #136]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009c8:	f000 fb3e 	bl	8001048 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_TIM_Base_MspInit+0x116>
    {
      Error_Handler();
 80009d2:	f7ff fed7 	bl	8000784 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
 80009f4:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_TIM_Base_MspInit+0x190>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009fa:	e018      	b.n	8000a2e <HAL_TIM_Base_MspInit+0x16e>
  else if(htim_base->Instance==TIM2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a04:	d113      	bne.n	8000a2e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_TIM_Base_MspInit+0x17c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <HAL_TIM_Base_MspInit+0x17c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_TIM_Base_MspInit+0x17c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	201c      	movs	r0, #28
 8000a24:	f000 fa6b 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a28:	201c      	movs	r0, #28
 8000a2a:	f000 fa84 	bl	8000f36 <HAL_NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	20000118 	.word	0x20000118
 8000a44:	4002001c 	.word	0x4002001c
 8000a48:	2000015c 	.word	0x2000015c
 8000a4c:	4002006c 	.word	0x4002006c
 8000a50:	200001a0 	.word	0x200001a0
 8000a54:	40020044 	.word	0x40020044

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_TIM_MspPostInit+0x64>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d11b      	bne.n	8000ab2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000a92:	230d      	movs	r3, #13
 8000a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000aae:	f000 fc61 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000800 	.word	0x48000800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x7c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d128      	bne.n	8000b3c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_UART_MspInit+0x80>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fc1c 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f8b6 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ba6:	f000 fad8 	bl	800115a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000118 	.word	0x20000118

08000bb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <DMA1_Channel3_IRQHandler+0x10>)
 8000bba:	f000 face 	bl	800115a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000003c 	.word	0x2000003c

08000bc8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel4_IRQHandler+0x10>)
 8000bce:	f000 fac4 	bl	800115a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200001a0 	.word	0x200001a0

08000bdc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA1_Channel6_IRQHandler+0x10>)
 8000be2:	f000 faba 	bl	800115a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000015c 	.word	0x2000015c

08000bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM2_IRQHandler+0x10>)
 8000bf6:	f002 fbb5 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000cc 	.word	0x200000cc

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c2c:	f7ff ffea 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopForever+0xe>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopForever+0x16>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 f87d 	bl	8004d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5a:	f7ff fb0f 	bl	800027c <main>

08000c5e <LoopForever>:

LoopForever:
    b LoopForever
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c6c:	08005004 	.word	0x08005004
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c74:	20000270 	.word	0x20000270

08000c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_2_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x28>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x28>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f92b 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fd7a 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f943 	bl	8000f52 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 f90b 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	2000026c 	.word	0x2000026c

08000d30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000026c 	.word	0x2000026c

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e014      	b.n	8000fa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d105      	bne.n	8000f92 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fc23 	bl	80007d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2202      	movs	r2, #2
 8000f96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b087      	sub	sp, #28
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_DAC_ConfigChannel+0x20>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e036      	b.n	800103c <HAL_DAC_ConfigChannel+0x8e>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000fe2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	22c0      	movs	r2, #192	; 0xc0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43da      	mvns	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e037      	b.n	80010ce <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2202      	movs	r2, #2
 8001062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001074:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001078:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f923 	bl	80012fc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_Start+0x20>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e02d      	b.n	8001152 <HAL_DMA_Start+0x7c>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001104:	2b01      	cmp	r3, #1
 8001106:	d11d      	bne.n	8001144 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f8b7 	bl	80012a0 <DMA_SetConfig>

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0201 	orr.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e005      	b.n	8001150 <HAL_DMA_Start+0x7a>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800114c:	2302      	movs	r3, #2
 800114e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001150:	7dfb      	ldrb	r3, [r7, #23]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2204      	movs	r2, #4
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <HAL_DMA_IRQHandler+0x72>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01f      	beq.n	80011cc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	2b00      	cmp	r3, #0
 8001198:	d107      	bne.n	80011aa <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0204 	bic.w	r2, r2, #4
 80011a8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	2104      	movs	r1, #4
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d06a      	beq.n	8001298 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011ca:	e065      	b.n	8001298 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	2202      	movs	r2, #2
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d02c      	beq.n	8001236 <HAL_DMA_IRQHandler+0xdc>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d027      	beq.n	8001236 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020a 	bic.w	r2, r2, #10
 8001202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	2102      	movs	r1, #2
 8001216:	fa01 f202 	lsl.w	r2, r1, r2
 800121a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d035      	beq.n	8001298 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001234:	e030      	b.n	8001298 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2208      	movs	r2, #8
 800123c:	409a      	lsls	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d028      	beq.n	8001298 <HAL_DMA_IRQHandler+0x13e>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d023      	beq.n	8001298 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020e 	bic.w	r2, r2, #14
 800125e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	4798      	blx	r3
    }
  }
}
 8001296:	e7ff      	b.n	8001298 <HAL_DMA_IRQHandler+0x13e>
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d108      	bne.n	80012e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012de:	e007      	b.n	80012f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <DMA_CalcBaseAndBitshift+0x60>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d80f      	bhi.n	8001330 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <DMA_CalcBaseAndBitshift+0x64>)
 8001318:	4413      	add	r3, r2
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <DMA_CalcBaseAndBitshift+0x68>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	009a      	lsls	r2, r3, #2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <DMA_CalcBaseAndBitshift+0x6c>)
 800132c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800132e:	e00e      	b.n	800134e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <DMA_CalcBaseAndBitshift+0x70>)
 8001338:	4413      	add	r3, r2
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <DMA_CalcBaseAndBitshift+0x68>)
 800133c:	fba2 2303 	umull	r2, r3, r2, r3
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	009a      	lsls	r2, r3, #2
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <DMA_CalcBaseAndBitshift+0x74>)
 800134c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40020407 	.word	0x40020407
 8001360:	bffdfff8 	.word	0xbffdfff8
 8001364:	cccccccd 	.word	0xcccccccd
 8001368:	40020000 	.word	0x40020000
 800136c:	bffdfbf8 	.word	0xbffdfbf8
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e160      	b.n	8001646 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8152 	beq.w	8001640 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d005      	beq.n	80013b4 <HAL_GPIO_Init+0x40>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d130      	bne.n	8001416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ea:	2201      	movs	r2, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 0201 	and.w	r2, r3, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b03      	cmp	r3, #3
 8001420:	d017      	beq.n	8001452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d123      	bne.n	80014a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	6939      	ldr	r1, [r7, #16]
 80014a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0203 	and.w	r2, r3, #3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80ac 	beq.w	8001640 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_GPIO_Init+0x2f0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a5d      	ldr	r2, [pc, #372]	; (8001664 <HAL_GPIO_Init+0x2f0>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <HAL_GPIO_Init+0x2f0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001500:	4a59      	ldr	r2, [pc, #356]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800152a:	d025      	beq.n	8001578 <HAL_GPIO_Init+0x204>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_GPIO_Init+0x2f8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d01f      	beq.n	8001574 <HAL_GPIO_Init+0x200>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_GPIO_Init+0x2fc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d019      	beq.n	8001570 <HAL_GPIO_Init+0x1fc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x300>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_GPIO_Init+0x1f8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x304>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00d      	beq.n	8001568 <HAL_GPIO_Init+0x1f4>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_GPIO_Init+0x308>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d007      	beq.n	8001564 <HAL_GPIO_Init+0x1f0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <HAL_GPIO_Init+0x30c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_GPIO_Init+0x1ec>
 800155c:	2306      	movs	r3, #6
 800155e:	e00c      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001560:	2307      	movs	r3, #7
 8001562:	e00a      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001564:	2305      	movs	r3, #5
 8001566:	e008      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001568:	2304      	movs	r3, #4
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x206>
 800156c:	2303      	movs	r3, #3
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x206>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_GPIO_Init+0x310>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015bc:	4a31      	ldr	r2, [pc, #196]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015e6:	4a27      	ldr	r2, [pc, #156]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_GPIO_Init+0x310>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_GPIO_Init+0x310>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_GPIO_Init+0x310>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_GPIO_Init+0x310>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae97 	bne.w	8001384 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	48001000 	.word	0x48001000
 800167c:	48001400 	.word	0x48001400
 8001680:	48001800 	.word	0x48001800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016be:	af00      	add	r7, sp, #0
 80016c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	f001 b83a 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 816f 	beq.w	80019d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016f4:	4bb5      	ldr	r3, [pc, #724]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d00c      	beq.n	800171a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001700:	4bb2      	ldr	r3, [pc, #712]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d15c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x10e>
 800170c:	4baf      	ldr	r3, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d155      	bne.n	80017c6 <HAL_RCC_OscConfig+0x10e>
 800171a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800172e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0x94>
 8001746:	4ba1      	ldr	r3, [pc, #644]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	e015      	b.n	8001778 <HAL_RCC_OscConfig+0xc0>
 800174c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001750:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001764:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001768:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001774:	4b95      	ldr	r3, [pc, #596]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001780:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001784:	fa92 f2a2 	rbit	r2, r2
 8001788:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800178c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001790:	fab2 f282 	clz	r2, r2
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f042 0220 	orr.w	r2, r2, #32
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f002 021f 	and.w	r2, r2, #31
 80017a0:	2101      	movs	r1, #1
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8111 	beq.w	80019d0 <HAL_RCC_OscConfig+0x318>
 80017ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 8108 	bne.w	80019d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	f000 bfc6 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12e>
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a7b      	ldr	r2, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e036      	b.n	8001854 <HAL_RCC_OscConfig+0x19c>
 80017e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x158>
 80017f6:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a74      	ldr	r2, [pc, #464]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80017fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a71      	ldr	r2, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e021      	b.n	8001854 <HAL_RCC_OscConfig+0x19c>
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x184>
 8001822:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a69      	ldr	r2, [pc, #420]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a66      	ldr	r2, [pc, #408]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0x19c>
 800183c:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a62      	ldr	r2, [pc, #392]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b60      	ldr	r3, [pc, #384]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d059      	beq.n	8001918 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fa64 	bl	8000d30 <HAL_GetTick>
 8001868:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186e:	f7ff fa5f 	bl	8000d30 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d902      	bls.n	8001884 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	f000 bf67 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
 8001884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001888:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001898:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_OscConfig+0x1fe>
 80018b0:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x22a>
 80018b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80018ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018ee:	fa92 f2a2 	rbit	r2, r2
 80018f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018fa:	fab2 f282 	clz	r2, r2
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f042 0220 	orr.w	r2, r2, #32
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f002 021f 	and.w	r2, r2, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0ab      	beq.n	800186e <HAL_RCC_OscConfig+0x1b6>
 8001916:	e05c      	b.n	80019d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fa0a 	bl	8000d30 <HAL_GetTick>
 800191c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001922:	f7ff fa05 	bl	8000d30 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d902      	bls.n	8001938 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	f000 bf0d 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800194c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_RCC_OscConfig+0x2b2>
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x2de>
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001986:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_OscConfig+0x314>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800199e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80019a2:	fa92 f2a2 	rbit	r2, r2
 80019a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80019aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019ae:	fab2 f282 	clz	r2, r2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f042 0220 	orr.w	r2, r2, #32
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f002 021f 	and.w	r2, r2, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ab      	bne.n	8001922 <HAL_RCC_OscConfig+0x26a>
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_OscConfig+0x31a>
 80019cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 817f 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019e8:	4ba7      	ldr	r3, [pc, #668]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019f4:	4ba4      	ldr	r3, [pc, #656]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d173      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x430>
 8001a00:	4ba1      	ldr	r3, [pc, #644]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a0c:	d16c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x430>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a20:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x386>
 8001a38:	4b93      	ldr	r3, [pc, #588]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	e013      	b.n	8001a66 <HAL_RCC_OscConfig+0x3ae>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a56:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2202      	movs	r2, #2
 8001a68:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a6c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a70:	fa92 f2a2 	rbit	r2, r2
 8001a74:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a78:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f042 0220 	orr.w	r2, r2, #32
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00a      	beq.n	8001aae <HAL_RCC_OscConfig+0x3f6>
 8001a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d002      	beq.n	8001aae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f000 be52 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	21f8      	movs	r1, #248	; 0xf8
 8001ac4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001acc:	fa91 f1a1 	rbit	r1, r1
 8001ad0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001ad4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ad8:	fab1 f181 	clz	r1, r1
 8001adc:	b2c9      	uxtb	r1, r1
 8001ade:	408b      	lsls	r3, r1
 8001ae0:	4969      	ldr	r1, [pc, #420]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e0fe      	b.n	8001ce6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 8088 	beq.w	8001c0a <HAL_RCC_OscConfig+0x552>
 8001afa:	2301      	movs	r3, #1
 8001afc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001b0c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	461a      	mov	r2, r3
 8001b22:	2301      	movs	r3, #1
 8001b24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f903 	bl	8000d30 <HAL_GetTick>
 8001b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff f8fe 	bl	8000d30 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d902      	bls.n	8001b46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f000 be06 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001b58:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4be>
 8001b70:	4b45      	ldr	r3, [pc, #276]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	e013      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e6>
 8001b76:	2302      	movs	r3, #2
 8001b78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ba4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ba8:	fa92 f2a2 	rbit	r2, r2
 8001bac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001bb0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0af      	beq.n	8001b30 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	21f8      	movs	r1, #248	; 0xf8
 8001be6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001bee:	fa91 f1a1 	rbit	r1, r1
 8001bf2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001bf6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bfa:	fab1 f181 	clz	r1, r1
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	408b      	lsls	r3, r1
 8001c02:	4921      	ldr	r1, [pc, #132]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e06d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x62e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff f87b 	bl	8000d30 <HAL_GetTick>
 8001c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff f876 	bl	8000d30 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d902      	bls.n	8001c56 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f000 bd7e 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001c68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5d4>
 8001c80:	4b01      	ldr	r3, [pc, #4]	; (8001c88 <HAL_RCC_OscConfig+0x5d0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e016      	b.n	8001cb4 <HAL_RCC_OscConfig+0x5fc>
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ca4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cb0:	4bbf      	ldr	r3, [pc, #764]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001cba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001cc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cca:	fab2 f282 	clz	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f002 021f 	and.w	r2, r2, #31
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ac      	bne.n	8001c40 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8113 	beq.w	8001f22 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x74e>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4ba2      	ldr	r3, [pc, #648]	; (8001fb4 <HAL_RCC_OscConfig+0x8fc>)
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	461a      	mov	r2, r3
 8001d32:	2301      	movs	r3, #1
 8001d34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7fe fffb 	bl	8000d30 <HAL_GetTick>
 8001d3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d40:	f7fe fff6 	bl	8000d30 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d902      	bls.n	8001d56 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f000 bcfe 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001db4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	4b7e      	ldr	r3, [pc, #504]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	6019      	str	r1, [r3, #0]
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f1a3 	rbit	r1, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ddc:	6019      	str	r1, [r3, #0]
  return result;
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d09d      	beq.n	8001d40 <HAL_RCC_OscConfig+0x688>
 8001e04:	e08d      	b.n	8001f22 <HAL_RCC_OscConfig+0x86a>
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	fa93 f2a3 	rbit	r2, r3
 8001e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e28:	601a      	str	r2, [r3, #0]
  return result;
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x8fc>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	461a      	mov	r2, r3
 8001e44:	2300      	movs	r3, #0
 8001e46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7fe ff72 	bl	8000d30 <HAL_GetTick>
 8001e4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7fe ff6d 	bl	8000d30 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d902      	bls.n	8001e68 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f000 bc75 	b.w	8002752 <HAL_RCC_OscConfig+0x109a>
 8001e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001eb8:	2202      	movs	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ed2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	6019      	str	r1, [r3, #0]
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f1a3 	rbit	r1, r3
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001efa:	6019      	str	r1, [r3, #0]
  return result;
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d197      	bne.n	8001e52 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 81a5 	beq.w	8002282 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_RCC_OscConfig+0x8f8>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f70:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_OscConfig+0x900>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_RCC_OscConfig+0x900>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x900>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f90:	f7fe fece 	bl	8000d30 <HAL_GetTick>
 8001f94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	e010      	b.n	8001fbc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7fe fec9 	bl	8000d30 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e3d1      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	10908120 	.word	0x10908120
 8001fb8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <HAL_RCC_OscConfig+0xb3c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0e8      	beq.n	8001f9a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x92e>
 8001fd8:	4b87      	ldr	r3, [pc, #540]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a86      	ldr	r2, [pc, #536]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e035      	b.n	8002052 <HAL_RCC_OscConfig+0x99a>
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x958>
 8001ff6:	4b80      	ldr	r3, [pc, #512]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a7f      	ldr	r2, [pc, #508]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b7d      	ldr	r3, [pc, #500]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a7c      	ldr	r2, [pc, #496]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	e020      	b.n	8002052 <HAL_RCC_OscConfig+0x99a>
 8002010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002014:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x982>
 8002020:	4b75      	ldr	r3, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a71      	ldr	r2, [pc, #452]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x99a>
 800203a:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a6e      	ldr	r2, [pc, #440]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a6b      	ldr	r2, [pc, #428]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8081 	beq.w	8002166 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fe64 	bl	8000d30 <HAL_GetTick>
 8002068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fe5f 	bl	8000d30 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e365      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
 8002086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800208e:	2202      	movs	r2, #2
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002096:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80020d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0xa3a>
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0xa62>
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800211e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002122:	2102      	movs	r1, #2
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fa92 f1a2 	rbit	r1, r2
 8002134:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002138:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800213c:	6011      	str	r1, [r2, #0]
  return result;
 800213e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002142:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d084      	beq.n	800206e <HAL_RCC_OscConfig+0x9b6>
 8002164:	e083      	b.n	800226e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7fe fde3 	bl	8000d30 <HAL_GetTick>
 800216a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7fe fdde 	bl	8000d30 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e2e4      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002198:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021ce:	601a      	str	r2, [r3, #0]
  return result;
 80021d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80021d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d106      	bne.n	80021fc <HAL_RCC_OscConfig+0xb44>
 80021ee:	4b02      	ldr	r3, [pc, #8]	; (80021f8 <HAL_RCC_OscConfig+0xb40>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	e017      	b.n	8002224 <HAL_RCC_OscConfig+0xb6c>
 80021f4:	40007000 	.word	0x40007000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002200:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	4bb3      	ldr	r3, [pc, #716]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002228:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800222c:	2102      	movs	r1, #2
 800222e:	6011      	str	r1, [r2, #0]
 8002230:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002234:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	fa92 f1a2 	rbit	r1, r2
 800223e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002242:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002246:	6011      	str	r1, [r2, #0]
  return result;
 8002248:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800224c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d180      	bne.n	8002170 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800226e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b9e      	ldr	r3, [pc, #632]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a9d      	ldr	r2, [pc, #628]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002286:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 825e 	beq.w	8002750 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002294:	4b96      	ldr	r3, [pc, #600]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	f000 821f 	beq.w	80026e0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	f040 8170 	bne.w	8002594 <HAL_RCC_OscConfig+0xedc>
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022d8:	601a      	str	r2, [r3, #0]
  return result;
 80022da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2300      	movs	r3, #0
 80022f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fd19 	bl	8000d30 <HAL_GetTick>
 80022fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	e009      	b.n	8002318 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fd14 	bl	8000d30 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e21c      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
 8002318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002338:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002342:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002346:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0xcaa>
 800235c:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	e027      	b.n	80023b2 <HAL_RCC_OscConfig+0xcfa>
 8002362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002366:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800236a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002382:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023be:	6011      	str	r1, [r2, #0]
 80023c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	fa92 f1a2 	rbit	r1, r2
 80023ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023d2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023d6:	6011      	str	r1, [r2, #0]
  return result;
 80023d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023dc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	fab2 f282 	clz	r2, r2
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	f042 0220 	orr.w	r2, r2, #32
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f002 021f 	and.w	r2, r2, #31
 80023f2:	2101      	movs	r1, #1
 80023f4:	fa01 f202 	lsl.w	r2, r1, r2
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d182      	bne.n	8002304 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	4937      	ldr	r1, [pc, #220]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 8002414:	4313      	orrs	r3, r2
 8002416:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a19      	ldr	r1, [r3, #32]
 800242c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002430:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	430b      	orrs	r3, r1
 800243a:	492d      	ldr	r1, [pc, #180]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800244c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002452:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002460:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002464:	601a      	str	r2, [r3, #0]
  return result;
 8002466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800246e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800247a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	461a      	mov	r2, r3
 8002482:	2301      	movs	r3, #1
 8002484:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fc53 	bl	8000d30 <HAL_GetTick>
 800248a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248e:	e009      	b.n	80024a4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fc4e 	bl	8000d30 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e156      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0xe3c>
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <HAL_RCC_OscConfig+0xe38>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e02a      	b.n	8002544 <HAL_RCC_OscConfig+0xe8c>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002506:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	4b86      	ldr	r3, [pc, #536]	; (800275c <HAL_RCC_OscConfig+0x10a4>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002548:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800254c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002556:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	fa92 f1a2 	rbit	r1, r2
 8002560:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002564:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002568:	6011      	str	r1, [r2, #0]
  return result;
 800256a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800256e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f042 0220 	orr.w	r2, r2, #32
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f002 021f 	and.w	r2, r2, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	f43f af7f 	beq.w	8002490 <HAL_RCC_OscConfig+0xdd8>
 8002592:	e0dd      	b.n	8002750 <HAL_RCC_OscConfig+0x1098>
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800259c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025b8:	601a      	str	r2, [r3, #0]
  return result;
 80025ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025c2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	461a      	mov	r2, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe fba9 	bl	8000d30 <HAL_GetTick>
 80025de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	e009      	b.n	80025f8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fba4 	bl	8000d30 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ac      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
 80025f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002622:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002626:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0xf8a>
 800263c:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_OscConfig+0x10a4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e027      	b.n	8002692 <HAL_RCC_OscConfig+0xfda>
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800264a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002654:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002662:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002688:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_RCC_OscConfig+0x10a4>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002696:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800269a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800269e:	6011      	str	r1, [r2, #0]
 80026a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	fa92 f1a2 	rbit	r1, r2
 80026ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026b2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026b6:	6011      	str	r1, [r2, #0]
  return result;
 80026b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026bc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d182      	bne.n	80025e4 <HAL_RCC_OscConfig+0xf2c>
 80026de:	e037      	b.n	8002750 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e02e      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_OscConfig+0x10a4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_RCC_OscConfig+0x10a4>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002704:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002708:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800270c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002710:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	d117      	bne.n	800274c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800271c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002720:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002730:	429a      	cmp	r2, r3
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002740:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b09e      	sub	sp, #120	; 0x78
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e162      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b90      	ldr	r3, [pc, #576]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b8d      	ldr	r3, [pc, #564]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	498b      	ldr	r1, [pc, #556]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e14a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	497f      	ldr	r1, [pc, #508]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80dc 	beq.w	800298c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d13c      	bne.n	8002856 <HAL_RCC_ClockConfig+0xf6>
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_ClockConfig+0xa6>
 8002800:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	e00f      	b.n	8002826 <HAL_RCC_ClockConfig+0xc6>
 8002806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	667b      	str	r3, [r7, #100]	; 0x64
 8002814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002818:	663b      	str	r3, [r7, #96]	; 0x60
 800281a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282a:	65ba      	str	r2, [r7, #88]	; 0x58
 800282c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800282e:	fa92 f2a2 	rbit	r2, r2
 8002832:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0220 	orr.w	r2, r2, #32
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d17b      	bne.n	800294a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0f3      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d13c      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x178>
 800285e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_RCC_ClockConfig+0x128>
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e00f      	b.n	80028a8 <HAL_RCC_ClockConfig+0x148>
 8002888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
 8002896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
 800289c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a4:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80028ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0220 	orr.w	r2, r2, #32
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d13a      	bne.n	800294a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b2      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
 80028d8:	2302      	movs	r3, #2
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_ClockConfig+0x1a0>
 80028fa:	4b31      	ldr	r3, [pc, #196]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e00d      	b.n	800291c <HAL_RCC_ClockConfig+0x1bc>
 8002900:	2302      	movs	r3, #2
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	2302      	movs	r3, #2
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2202      	movs	r2, #2
 800291e:	61ba      	str	r2, [r7, #24]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	617a      	str	r2, [r7, #20]
  return result;
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	fab2 f282 	clz	r2, r2
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f042 0220 	orr.w	r2, r2, #32
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	f002 021f 	and.w	r2, r2, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f202 	lsl.w	r2, r1, r2
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e079      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 0203 	bic.w	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295c:	f7fe f9e8 	bl	8000d30 <HAL_GetTick>
 8002960:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	e00a      	b.n	800297a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002964:	f7fe f9e4 	bl	8000d30 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e061      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_RCC_ClockConfig+0x260>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 020c 	and.w	r2, r3, #12
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d1eb      	bne.n	8002964 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d214      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4906      	ldr	r1, [pc, #24]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_RCC_ClockConfig+0x25c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e040      	b.n	8002a3e <HAL_RCC_ClockConfig+0x2de>
 80029bc:	40022000 	.word	0x40022000
 80029c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_ClockConfig+0x2e8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	491a      	ldr	r1, [pc, #104]	; (8002a48 <HAL_RCC_ClockConfig+0x2e8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_RCC_ClockConfig+0x2e8>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4912      	ldr	r1, [pc, #72]	; (8002a48 <HAL_RCC_ClockConfig+0x2e8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a02:	f000 f829 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a06:	4601      	mov	r1, r0
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCC_ClockConfig+0x2e8>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a10:	22f0      	movs	r2, #240	; 0xf0
 8002a12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	40d3      	lsrs	r3, r2
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x2ec>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <HAL_RCC_ClockConfig+0x2f0>)
 8002a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_RCC_ClockConfig+0x2f4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f936 	bl	8000ca8 <HAL_InitTick>
  
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3778      	adds	r7, #120	; 0x78
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004fc4 	.word	0x08004fc4
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x30>
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x36>
 8002a86:	e029      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a8a:	613b      	str	r3, [r7, #16]
      break;
 8002a8c:	e029      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	0c9b      	lsrs	r3, r3, #18
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ab4:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e007      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	613b      	str	r3, [r7, #16]
      break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ade:	613b      	str	r3, [r7, #16]
      break;
 8002ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae2:	693b      	ldr	r3, [r7, #16]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	007a1200 	.word	0x007a1200
 8002af8:	08004fdc 	.word	0x08004fdc
 8002afc:	08004fec 	.word	0x08004fec

08002b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000000 	.word	0x20000000

08002b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b1e:	f7ff ffef 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b22:	4601      	mov	r1, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	603a      	str	r2, [r7, #0]
  return result;
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	40d3      	lsrs	r3, r2
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08004fd4 	.word	0x08004fd4

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b62:	f7ff ffcd 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	603a      	str	r2, [r7, #0]
  return result;
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	40d3      	lsrs	r3, r2
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08004fd4 	.word	0x08004fd4

08002ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b092      	sub	sp, #72	; 0x48
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80d4 	beq.w	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10e      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	61d3      	str	r3, [r2, #28]
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a41      	ldr	r2, [pc, #260]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7fe f893 	bl	8000d30 <HAL_GetTick>
 8002c0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fe f88f 	bl	8000d30 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	; 0x64
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1d6      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2c:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8084 	beq.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d07c      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	2301      	movs	r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04b      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe f83f 	bl	8000d30 <HAL_GetTick>
 8002cb2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe f83b 	bl	8000d30 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e180      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	2302      	movs	r3, #2
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d108      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cfa:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	e00d      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	10908100 	.word	0x10908100
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	4b9a      	ldr	r3, [pc, #616]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	613a      	str	r2, [r7, #16]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	60fa      	str	r2, [r7, #12]
  return result;
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0b7      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d46:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	498c      	ldr	r1, [pc, #560]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d60:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a87      	ldr	r2, [pc, #540]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d78:	4b82      	ldr	r3, [pc, #520]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f023 0203 	bic.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	497f      	ldr	r1, [pc, #508]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d96:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4978      	ldr	r1, [pc, #480]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db4:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4970      	ldr	r1, [pc, #448]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f023 0210 	bic.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4969      	ldr	r1, [pc, #420]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002df0:	4b64      	ldr	r3, [pc, #400]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	4961      	ldr	r1, [pc, #388]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f023 0220 	bic.w	r2, r3, #32
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	495a      	ldr	r1, [pc, #360]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e2c:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	4952      	ldr	r1, [pc, #328]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e4a:	4b4e      	ldr	r3, [pc, #312]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	494b      	ldr	r1, [pc, #300]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4943      	ldr	r1, [pc, #268]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	493c      	ldr	r1, [pc, #240]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	4934      	ldr	r1, [pc, #208]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ec2:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	492d      	ldr	r1, [pc, #180]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	4925      	ldr	r1, [pc, #148]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	491e      	ldr	r1, [pc, #120]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	4916      	ldr	r1, [pc, #88]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	490f      	ldr	r1, [pc, #60]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00c      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f76:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	e002      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	4913      	ldr	r1, [pc, #76]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa8:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fba:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc6:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3748      	adds	r7, #72	; 0x48
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000

08002fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e049      	b.n	8003082 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fc5c 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 fcb4 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e049      	b.n	8003130 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f841 	bl	8003138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fc5d 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_TIM_PWM_Start+0x24>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e03c      	b.n	80031ea <HAL_TIM_PWM_Start+0x9e>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d109      	bne.n	800318a <HAL_TIM_PWM_Start+0x3e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e02f      	b.n	80031ea <HAL_TIM_PWM_Start+0x9e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d109      	bne.n	80031a4 <HAL_TIM_PWM_Start+0x58>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e022      	b.n	80031ea <HAL_TIM_PWM_Start+0x9e>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d109      	bne.n	80031be <HAL_TIM_PWM_Start+0x72>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e015      	b.n	80031ea <HAL_TIM_PWM_Start+0x9e>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d109      	bne.n	80031d8 <HAL_TIM_PWM_Start+0x8c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e008      	b.n	80031ea <HAL_TIM_PWM_Start+0x9e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0a1      	b.n	8003336 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0xb6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	e023      	b.n	800324a <HAL_TIM_PWM_Start+0xfe>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Start+0xc6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	e01b      	b.n	800324a <HAL_TIM_PWM_Start+0xfe>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_PWM_Start+0xd6>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	e013      	b.n	800324a <HAL_TIM_PWM_Start+0xfe>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d104      	bne.n	8003232 <HAL_TIM_PWM_Start+0xe6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003230:	e00b      	b.n	800324a <HAL_TIM_PWM_Start+0xfe>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b10      	cmp	r3, #16
 8003236:	d104      	bne.n	8003242 <HAL_TIM_PWM_Start+0xf6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003240:	e003      	b.n	800324a <HAL_TIM_PWM_Start+0xfe>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 ffe2 	bl	800421c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_TIM_PWM_Start+0x1f4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_TIM_PWM_Start+0x148>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_TIM_PWM_Start+0x1f8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_TIM_PWM_Start+0x148>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a35      	ldr	r2, [pc, #212]	; (8003348 <HAL_TIM_PWM_Start+0x1fc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_TIM_PWM_Start+0x148>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a34      	ldr	r2, [pc, #208]	; (800334c <HAL_TIM_PWM_Start+0x200>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_TIM_PWM_Start+0x148>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a32      	ldr	r2, [pc, #200]	; (8003350 <HAL_TIM_PWM_Start+0x204>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_TIM_PWM_Start+0x148>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_TIM_PWM_Start+0x208>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_TIM_PWM_Start+0x14c>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_TIM_PWM_Start+0x14e>
 8003298:	2300      	movs	r3, #0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a23      	ldr	r2, [pc, #140]	; (8003340 <HAL_TIM_PWM_Start+0x1f4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01d      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x1a8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d018      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x1a8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_TIM_PWM_Start+0x20c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x1a8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_TIM_PWM_Start+0x210>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x1a8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <HAL_TIM_PWM_Start+0x1f8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x1a8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_TIM_PWM_Start+0x1fc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x1a8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_TIM_PWM_Start+0x208>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d115      	bne.n	8003320 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_TIM_PWM_Start+0x214>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d015      	beq.n	8003332 <HAL_TIM_PWM_Start+0x1e6>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d011      	beq.n	8003332 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	e008      	b.n	8003332 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e000      	b.n	8003334 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40013400 	.word	0x40013400
 8003348:	40014000 	.word	0x40014000
 800334c:	40014400 	.word	0x40014400
 8003350:	40014800 	.word	0x40014800
 8003354:	40015000 	.word	0x40015000
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	00010007 	.word	0x00010007

08003364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d020      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 facb 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fabd 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 face 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0204 	mvn.w	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 faa5 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa97 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 faa8 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa7f 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa71 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa82 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0210 	mvn.w	r2, #16
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2208      	movs	r2, #8
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa59 	bl	800394a <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa4b 	bl	8003936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa5c 	bl	800395e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0201 	mvn.w	r2, #1
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa29 	bl	8003922 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ffd6 	bl	80044a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 ffce 	bl	80044b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa1b 	bl	8003972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0220 	mvn.w	r2, #32
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 ff96 	bl	800448c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003582:	2302      	movs	r3, #2
 8003584:	e0ff      	b.n	8003786 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b14      	cmp	r3, #20
 8003592:	f200 80f0 	bhi.w	8003776 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003596:	a201      	add	r2, pc, #4	; (adr r2, 800359c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	08003777 	.word	0x08003777
 80035a4:	08003777 	.word	0x08003777
 80035a8:	08003777 	.word	0x08003777
 80035ac:	08003631 	.word	0x08003631
 80035b0:	08003777 	.word	0x08003777
 80035b4:	08003777 	.word	0x08003777
 80035b8:	08003777 	.word	0x08003777
 80035bc:	08003673 	.word	0x08003673
 80035c0:	08003777 	.word	0x08003777
 80035c4:	08003777 	.word	0x08003777
 80035c8:	08003777 	.word	0x08003777
 80035cc:	080036b3 	.word	0x080036b3
 80035d0:	08003777 	.word	0x08003777
 80035d4:	08003777 	.word	0x08003777
 80035d8:	08003777 	.word	0x08003777
 80035dc:	080036f5 	.word	0x080036f5
 80035e0:	08003777 	.word	0x08003777
 80035e4:	08003777 	.word	0x08003777
 80035e8:	08003777 	.word	0x08003777
 80035ec:	08003735 	.word	0x08003735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fa70 	bl	8003adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0208 	orr.w	r2, r2, #8
 800360a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0204 	bic.w	r2, r2, #4
 800361a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6999      	ldr	r1, [r3, #24]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	619a      	str	r2, [r3, #24]
      break;
 800362e:	e0a5      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 faea 	bl	8003c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	021a      	lsls	r2, r3, #8
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	619a      	str	r2, [r3, #24]
      break;
 8003670:	e084      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fb5d 	bl	8003d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0208 	orr.w	r2, r2, #8
 800368c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0204 	bic.w	r2, r2, #4
 800369c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69d9      	ldr	r1, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	61da      	str	r2, [r3, #28]
      break;
 80036b0:	e064      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fbcf 	bl	8003e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	61da      	str	r2, [r3, #28]
      break;
 80036f2:	e043      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fc1e 	bl	8003f3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0208 	orr.w	r2, r2, #8
 800370e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0204 	bic.w	r2, r2, #4
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003732:	e023      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fc68 	bl	8004010 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003774:	e002      	b.n	800377c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
      break;
 800377a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003784:	7dfb      	ldrb	r3, [r7, #23]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop

08003790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_ConfigClockSource+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0b6      	b.n	800391a <HAL_TIM_ConfigClockSource+0x18a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e8:	d03e      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0xd8>
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ee:	f200 8087 	bhi.w	8003900 <HAL_TIM_ConfigClockSource+0x170>
 80037f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f6:	f000 8086 	beq.w	8003906 <HAL_TIM_ConfigClockSource+0x176>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	d87f      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003800:	2b70      	cmp	r3, #112	; 0x70
 8003802:	d01a      	beq.n	800383a <HAL_TIM_ConfigClockSource+0xaa>
 8003804:	2b70      	cmp	r3, #112	; 0x70
 8003806:	d87b      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003808:	2b60      	cmp	r3, #96	; 0x60
 800380a:	d050      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x11e>
 800380c:	2b60      	cmp	r3, #96	; 0x60
 800380e:	d877      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003810:	2b50      	cmp	r3, #80	; 0x50
 8003812:	d03c      	beq.n	800388e <HAL_TIM_ConfigClockSource+0xfe>
 8003814:	2b50      	cmp	r3, #80	; 0x50
 8003816:	d873      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d058      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x13e>
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d86f      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003820:	2b30      	cmp	r3, #48	; 0x30
 8003822:	d064      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 8003824:	2b30      	cmp	r3, #48	; 0x30
 8003826:	d86b      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d060      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d867      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 8003834:	2b10      	cmp	r3, #16
 8003836:	d05a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x15e>
 8003838:	e062      	b.n	8003900 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	f000 fcc7 	bl	80041dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800385c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	609a      	str	r2, [r3, #8]
      break;
 8003866:	e04f      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	f000 fcb0 	bl	80041dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388a:	609a      	str	r2, [r3, #8]
      break;
 800388c:	e03c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389a:	461a      	mov	r2, r3
 800389c:	f000 fc24 	bl	80040e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2150      	movs	r1, #80	; 0x50
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fc7d 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 80038ac:	e02c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 fc43 	bl	8004146 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2160      	movs	r1, #96	; 0x60
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fc6d 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 80038cc:	e01c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 fc04 	bl	80040e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fc5d 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 80038ec:	e00c      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 fc54 	bl	80041a6 <TIM_ITRx_SetConfig>
      break;
 80038fe:	e003      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e000      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a48      	ldr	r2, [pc, #288]	; (8003abc <TIM_Base_SetConfig+0x134>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d00f      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a45      	ldr	r2, [pc, #276]	; (8003ac0 <TIM_Base_SetConfig+0x138>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a44      	ldr	r2, [pc, #272]	; (8003ac4 <TIM_Base_SetConfig+0x13c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a43      	ldr	r2, [pc, #268]	; (8003ac8 <TIM_Base_SetConfig+0x140>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a42      	ldr	r2, [pc, #264]	; (8003acc <TIM_Base_SetConfig+0x144>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a37      	ldr	r2, [pc, #220]	; (8003abc <TIM_Base_SetConfig+0x134>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d01b      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a34      	ldr	r2, [pc, #208]	; (8003ac0 <TIM_Base_SetConfig+0x138>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d017      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a33      	ldr	r2, [pc, #204]	; (8003ac4 <TIM_Base_SetConfig+0x13c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a32      	ldr	r2, [pc, #200]	; (8003ac8 <TIM_Base_SetConfig+0x140>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00f      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a32      	ldr	r2, [pc, #200]	; (8003ad0 <TIM_Base_SetConfig+0x148>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <TIM_Base_SetConfig+0x14c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <TIM_Base_SetConfig+0x150>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <TIM_Base_SetConfig+0x144>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <TIM_Base_SetConfig+0x134>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <TIM_Base_SetConfig+0x100>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <TIM_Base_SetConfig+0x140>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0x100>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <TIM_Base_SetConfig+0x148>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0x100>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <TIM_Base_SetConfig+0x14c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x100>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <TIM_Base_SetConfig+0x150>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x100>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <TIM_Base_SetConfig+0x144>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d103      	bne.n	8003a90 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d105      	bne.n	8003aae <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	611a      	str	r2, [r3, #16]
  }
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40013400 	.word	0x40013400
 8003acc:	40015000 	.word	0x40015000
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800

08003adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 0201 	bic.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 0302 	bic.w	r3, r3, #2
 8003b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <TIM_OC1_SetConfig+0x11c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <TIM_OC1_SetConfig+0x88>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <TIM_OC1_SetConfig+0x120>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00f      	beq.n	8003b64 <TIM_OC1_SetConfig+0x88>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2e      	ldr	r2, [pc, #184]	; (8003c00 <TIM_OC1_SetConfig+0x124>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_OC1_SetConfig+0x88>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <TIM_OC1_SetConfig+0x128>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC1_SetConfig+0x88>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <TIM_OC1_SetConfig+0x12c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC1_SetConfig+0x88>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	; (8003c0c <TIM_OC1_SetConfig+0x130>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10c      	bne.n	8003b7e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0308 	bic.w	r3, r3, #8
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <TIM_OC1_SetConfig+0x11c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_OC1_SetConfig+0xd2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <TIM_OC1_SetConfig+0x120>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_OC1_SetConfig+0xd2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <TIM_OC1_SetConfig+0x124>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_OC1_SetConfig+0xd2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <TIM_OC1_SetConfig+0x128>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_OC1_SetConfig+0xd2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <TIM_OC1_SetConfig+0x12c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_OC1_SetConfig+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <TIM_OC1_SetConfig+0x130>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d111      	bne.n	8003bd2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	621a      	str	r2, [r3, #32]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40013400 	.word	0x40013400
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	40015000 	.word	0x40015000

08003c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f023 0210 	bic.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0320 	bic.w	r3, r3, #32
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <TIM_OC2_SetConfig+0x110>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_OC2_SetConfig+0x74>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a2b      	ldr	r2, [pc, #172]	; (8003d24 <TIM_OC2_SetConfig+0x114>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC2_SetConfig+0x74>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <TIM_OC2_SetConfig+0x118>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10d      	bne.n	8003ca0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <TIM_OC2_SetConfig+0x110>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xc0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <TIM_OC2_SetConfig+0x114>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00f      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xc0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <TIM_OC2_SetConfig+0x11c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xc0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <TIM_OC2_SetConfig+0x120>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xc0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <TIM_OC2_SetConfig+0x124>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_OC2_SetConfig+0xc0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <TIM_OC2_SetConfig+0x118>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400
 8003d28:	40015000 	.word	0x40015000
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800

08003d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <TIM_OC3_SetConfig+0x10c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_OC3_SetConfig+0x72>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <TIM_OC3_SetConfig+0x110>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC3_SetConfig+0x72>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <TIM_OC3_SetConfig+0x114>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10d      	bne.n	8003dc6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <TIM_OC3_SetConfig+0x10c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <TIM_OC3_SetConfig+0xbe>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <TIM_OC3_SetConfig+0x110>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_OC3_SetConfig+0xbe>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <TIM_OC3_SetConfig+0x118>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_OC3_SetConfig+0xbe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <TIM_OC3_SetConfig+0x11c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_OC3_SetConfig+0xbe>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <TIM_OC3_SetConfig+0x120>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC3_SetConfig+0xbe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC3_SetConfig+0x114>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d113      	bne.n	8003e1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40015000 	.word	0x40015000
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40014400 	.word	0x40014400
 8003e58:	40014800 	.word	0x40014800

08003e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	031b      	lsls	r3, r3, #12
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <TIM_OC4_SetConfig+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <TIM_OC4_SetConfig+0x8c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <TIM_OC4_SetConfig+0xcc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00f      	beq.n	8003ee8 <TIM_OC4_SetConfig+0x8c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <TIM_OC4_SetConfig+0xd0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <TIM_OC4_SetConfig+0x8c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <TIM_OC4_SetConfig+0xd4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d007      	beq.n	8003ee8 <TIM_OC4_SetConfig+0x8c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <TIM_OC4_SetConfig+0xd8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_OC4_SetConfig+0x8c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <TIM_OC4_SetConfig+0xdc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d109      	bne.n	8003efc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	019b      	lsls	r3, r3, #6
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40014400 	.word	0x40014400
 8003f34:	40014800 	.word	0x40014800
 8003f38:	40015000 	.word	0x40015000

08003f3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <TIM_OC5_SetConfig+0xbc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <TIM_OC5_SetConfig+0x82>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <TIM_OC5_SetConfig+0xc0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00f      	beq.n	8003fbe <TIM_OC5_SetConfig+0x82>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <TIM_OC5_SetConfig+0xc4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <TIM_OC5_SetConfig+0x82>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a16      	ldr	r2, [pc, #88]	; (8004004 <TIM_OC5_SetConfig+0xc8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_OC5_SetConfig+0x82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <TIM_OC5_SetConfig+0xcc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_OC5_SetConfig+0x82>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <TIM_OC5_SetConfig+0xd0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d109      	bne.n	8003fd2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40013400 	.word	0x40013400
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800
 800400c:	40015000 	.word	0x40015000

08004010 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	051b      	lsls	r3, r3, #20
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <TIM_OC6_SetConfig+0xc0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_OC6_SetConfig+0x84>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <TIM_OC6_SetConfig+0xc4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00f      	beq.n	8004094 <TIM_OC6_SetConfig+0x84>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_OC6_SetConfig+0xc8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_OC6_SetConfig+0x84>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <TIM_OC6_SetConfig+0xcc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_OC6_SetConfig+0x84>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <TIM_OC6_SetConfig+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC6_SetConfig+0x84>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <TIM_OC6_SetConfig+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d109      	bne.n	80040a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40013400 	.word	0x40013400
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800
 80040e4:	40015000 	.word	0x40015000

080040e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 030a 	bic.w	r3, r3, #10
 8004124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 0210 	bic.w	r2, r3, #16
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	031b      	lsls	r3, r3, #12
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f043 0307 	orr.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	431a      	orrs	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2201      	movs	r2, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1a      	ldr	r2, [r3, #32]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800427c:	2302      	movs	r3, #2
 800427e:	e06d      	b.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a30      	ldr	r2, [pc, #192]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2f      	ldr	r2, [pc, #188]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d01d      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d018      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a16      	ldr	r2, [pc, #88]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10c      	bne.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	4313      	orrs	r3, r2
 8004340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40013400 	.word	0x40013400
 8004370:	40015000 	.word	0x40015000
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40014000 	.word	0x40014000

08004380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e06a      	b.n	8004472 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d115      	bne.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	051b      	lsls	r3, r3, #20
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40013400 	.word	0x40013400
 8004488:	40015000 	.word	0x40015000

0800448c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e040      	b.n	800455c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc faec 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9fc 	bl	800490c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f825 	bl	8004564 <UART_SetConfig>
 800451a:	4603      	mov	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e01b      	b.n	800455c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fa7b 	bl	8004a50 <UART_CheckIdleState>
 800455a:	4603      	mov	r3, r0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b92      	ldr	r3, [pc, #584]	; (80047d8 <UART_SetConfig+0x274>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	6979      	ldr	r1, [r7, #20]
 8004598:	430b      	orrs	r3, r1
 800459a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a80      	ldr	r2, [pc, #512]	; (80047dc <UART_SetConfig+0x278>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d120      	bne.n	8004622 <UART_SetConfig+0xbe>
 80045e0:	4b7f      	ldr	r3, [pc, #508]	; (80047e0 <UART_SetConfig+0x27c>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d817      	bhi.n	800461c <UART_SetConfig+0xb8>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0x90>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004611 	.word	0x08004611
 80045fc:	08004617 	.word	0x08004617
 8004600:	0800460b 	.word	0x0800460b
 8004604:	2301      	movs	r3, #1
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e0b5      	b.n	8004776 <UART_SetConfig+0x212>
 800460a:	2302      	movs	r3, #2
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e0b2      	b.n	8004776 <UART_SetConfig+0x212>
 8004610:	2304      	movs	r3, #4
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e0af      	b.n	8004776 <UART_SetConfig+0x212>
 8004616:	2308      	movs	r3, #8
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e0ac      	b.n	8004776 <UART_SetConfig+0x212>
 800461c:	2310      	movs	r3, #16
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e0a9      	b.n	8004776 <UART_SetConfig+0x212>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6f      	ldr	r2, [pc, #444]	; (80047e4 <UART_SetConfig+0x280>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d124      	bne.n	8004676 <UART_SetConfig+0x112>
 800462c:	4b6c      	ldr	r3, [pc, #432]	; (80047e0 <UART_SetConfig+0x27c>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004634:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004638:	d011      	beq.n	800465e <UART_SetConfig+0xfa>
 800463a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800463e:	d817      	bhi.n	8004670 <UART_SetConfig+0x10c>
 8004640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004644:	d011      	beq.n	800466a <UART_SetConfig+0x106>
 8004646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464a:	d811      	bhi.n	8004670 <UART_SetConfig+0x10c>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <UART_SetConfig+0xf4>
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d006      	beq.n	8004664 <UART_SetConfig+0x100>
 8004656:	e00b      	b.n	8004670 <UART_SetConfig+0x10c>
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e08b      	b.n	8004776 <UART_SetConfig+0x212>
 800465e:	2302      	movs	r3, #2
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e088      	b.n	8004776 <UART_SetConfig+0x212>
 8004664:	2304      	movs	r3, #4
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e085      	b.n	8004776 <UART_SetConfig+0x212>
 800466a:	2308      	movs	r3, #8
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e082      	b.n	8004776 <UART_SetConfig+0x212>
 8004670:	2310      	movs	r3, #16
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e07f      	b.n	8004776 <UART_SetConfig+0x212>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5b      	ldr	r2, [pc, #364]	; (80047e8 <UART_SetConfig+0x284>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d124      	bne.n	80046ca <UART_SetConfig+0x166>
 8004680:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <UART_SetConfig+0x27c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004688:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800468c:	d011      	beq.n	80046b2 <UART_SetConfig+0x14e>
 800468e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004692:	d817      	bhi.n	80046c4 <UART_SetConfig+0x160>
 8004694:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004698:	d011      	beq.n	80046be <UART_SetConfig+0x15a>
 800469a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800469e:	d811      	bhi.n	80046c4 <UART_SetConfig+0x160>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x148>
 80046a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a8:	d006      	beq.n	80046b8 <UART_SetConfig+0x154>
 80046aa:	e00b      	b.n	80046c4 <UART_SetConfig+0x160>
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e061      	b.n	8004776 <UART_SetConfig+0x212>
 80046b2:	2302      	movs	r3, #2
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e05e      	b.n	8004776 <UART_SetConfig+0x212>
 80046b8:	2304      	movs	r3, #4
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e05b      	b.n	8004776 <UART_SetConfig+0x212>
 80046be:	2308      	movs	r3, #8
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e058      	b.n	8004776 <UART_SetConfig+0x212>
 80046c4:	2310      	movs	r3, #16
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e055      	b.n	8004776 <UART_SetConfig+0x212>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a47      	ldr	r2, [pc, #284]	; (80047ec <UART_SetConfig+0x288>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d124      	bne.n	800471e <UART_SetConfig+0x1ba>
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <UART_SetConfig+0x27c>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046e0:	d011      	beq.n	8004706 <UART_SetConfig+0x1a2>
 80046e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046e6:	d817      	bhi.n	8004718 <UART_SetConfig+0x1b4>
 80046e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ec:	d011      	beq.n	8004712 <UART_SetConfig+0x1ae>
 80046ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f2:	d811      	bhi.n	8004718 <UART_SetConfig+0x1b4>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <UART_SetConfig+0x19c>
 80046f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fc:	d006      	beq.n	800470c <UART_SetConfig+0x1a8>
 80046fe:	e00b      	b.n	8004718 <UART_SetConfig+0x1b4>
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e037      	b.n	8004776 <UART_SetConfig+0x212>
 8004706:	2302      	movs	r3, #2
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e034      	b.n	8004776 <UART_SetConfig+0x212>
 800470c:	2304      	movs	r3, #4
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e031      	b.n	8004776 <UART_SetConfig+0x212>
 8004712:	2308      	movs	r3, #8
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e02e      	b.n	8004776 <UART_SetConfig+0x212>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e02b      	b.n	8004776 <UART_SetConfig+0x212>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a33      	ldr	r2, [pc, #204]	; (80047f0 <UART_SetConfig+0x28c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d124      	bne.n	8004772 <UART_SetConfig+0x20e>
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <UART_SetConfig+0x27c>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004730:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004734:	d011      	beq.n	800475a <UART_SetConfig+0x1f6>
 8004736:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800473a:	d817      	bhi.n	800476c <UART_SetConfig+0x208>
 800473c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004740:	d011      	beq.n	8004766 <UART_SetConfig+0x202>
 8004742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004746:	d811      	bhi.n	800476c <UART_SetConfig+0x208>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <UART_SetConfig+0x1f0>
 800474c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004750:	d006      	beq.n	8004760 <UART_SetConfig+0x1fc>
 8004752:	e00b      	b.n	800476c <UART_SetConfig+0x208>
 8004754:	2300      	movs	r3, #0
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e00d      	b.n	8004776 <UART_SetConfig+0x212>
 800475a:	2302      	movs	r3, #2
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e00a      	b.n	8004776 <UART_SetConfig+0x212>
 8004760:	2304      	movs	r3, #4
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e007      	b.n	8004776 <UART_SetConfig+0x212>
 8004766:	2308      	movs	r3, #8
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e004      	b.n	8004776 <UART_SetConfig+0x212>
 800476c:	2310      	movs	r3, #16
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e001      	b.n	8004776 <UART_SetConfig+0x212>
 8004772:	2310      	movs	r3, #16
 8004774:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477e:	d16b      	bne.n	8004858 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	2b08      	cmp	r3, #8
 8004784:	d838      	bhi.n	80047f8 <UART_SetConfig+0x294>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x228>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047c1 	.word	0x080047c1
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047cf 	.word	0x080047cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe f9b2 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 80047b4:	61b8      	str	r0, [r7, #24]
        break;
 80047b6:	e024      	b.n	8004802 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe f9d0 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 80047bc:	61b8      	str	r0, [r7, #24]
        break;
 80047be:	e020      	b.n	8004802 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <UART_SetConfig+0x290>)
 80047c2:	61bb      	str	r3, [r7, #24]
        break;
 80047c4:	e01d      	b.n	8004802 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c6:	f7fe f947 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80047ca:	61b8      	str	r0, [r7, #24]
        break;
 80047cc:	e019      	b.n	8004802 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d2:	61bb      	str	r3, [r7, #24]
        break;
 80047d4:	e015      	b.n	8004802 <UART_SetConfig+0x29e>
 80047d6:	bf00      	nop
 80047d8:	efff69f3 	.word	0xefff69f3
 80047dc:	40013800 	.word	0x40013800
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40004400 	.word	0x40004400
 80047e8:	40004800 	.word	0x40004800
 80047ec:	40004c00 	.word	0x40004c00
 80047f0:	40005000 	.word	0x40005000
 80047f4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	77bb      	strb	r3, [r7, #30]
        break;
 8004800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d073      	beq.n	80048f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	005a      	lsls	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	441a      	add	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b0f      	cmp	r3, #15
 8004822:	d916      	bls.n	8004852 <UART_SetConfig+0x2ee>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482a:	d212      	bcs.n	8004852 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f023 030f 	bic.w	r3, r3, #15
 8004834:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	b29a      	uxth	r2, r3
 8004842:	89fb      	ldrh	r3, [r7, #14]
 8004844:	4313      	orrs	r3, r2
 8004846:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	89fa      	ldrh	r2, [r7, #14]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e04e      	b.n	80048f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	77bb      	strb	r3, [r7, #30]
 8004856:	e04b      	b.n	80048f0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	2b08      	cmp	r3, #8
 800485c:	d827      	bhi.n	80048ae <UART_SetConfig+0x34a>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x300>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	08004899 	.word	0x08004899
 8004870:	080048af 	.word	0x080048af
 8004874:	0800489f 	.word	0x0800489f
 8004878:	080048af 	.word	0x080048af
 800487c:	080048af 	.word	0x080048af
 8004880:	080048af 	.word	0x080048af
 8004884:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fe f946 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 800488c:	61b8      	str	r0, [r7, #24]
        break;
 800488e:	e013      	b.n	80048b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7fe f964 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <UART_SetConfig+0x3a4>)
 800489a:	61bb      	str	r3, [r7, #24]
        break;
 800489c:	e00c      	b.n	80048b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fe f8db 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80048a2:	61b8      	str	r0, [r7, #24]
        break;
 80048a4:	e008      	b.n	80048b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	61bb      	str	r3, [r7, #24]
        break;
 80048ac:	e004      	b.n	80048b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	77bb      	strb	r3, [r7, #30]
        break;
 80048b6:	bf00      	nop
    }

    if (pclk != 0U)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d018      	beq.n	80048f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085a      	lsrs	r2, r3, #1
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	441a      	add	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d909      	bls.n	80048ec <UART_SetConfig+0x388>
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d205      	bcs.n	80048ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	e001      	b.n	80048f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	007a1200 	.word	0x007a1200

0800490c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0a:	d10a      	bne.n	8004a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b098      	sub	sp, #96	; 0x60
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a60:	f7fc f966 	bl	8000d30 <HAL_GetTick>
 8004a64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d12e      	bne.n	8004ad2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f88c 	bl	8004ba0 <UART_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d021      	beq.n	8004ad2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
 8004aae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e6      	bne.n	8004a8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e062      	b.n	8004b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d149      	bne.n	8004b74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f856 	bl	8004ba0 <UART_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d03c      	beq.n	8004b74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	623b      	str	r3, [r7, #32]
   return(result);
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b4c:	61fa      	str	r2, [r7, #28]
 8004b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e011      	b.n	8004b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3758      	adds	r7, #88	; 0x58
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	e04f      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d04b      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fc f8b9 	bl	8000d30 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e04e      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d037      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d034      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d031      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d110      	bne.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2208      	movs	r2, #8
 8004c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f838 	bl	8004c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e029      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2c:	d111      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f81e 	bl	8004c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e00f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d0a0      	beq.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b095      	sub	sp, #84	; 0x54
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e6      	bne.n	8004c82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d118      	bne.n	8004d22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e6      	bne.n	8004cf0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d36:	bf00      	nop
 8004d38:	3754      	adds	r7, #84	; 0x54
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <memset>:
 8004d42:	4402      	add	r2, r0
 8004d44:	4603      	mov	r3, r0
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d100      	bne.n	8004d4c <memset+0xa>
 8004d4a:	4770      	bx	lr
 8004d4c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d50:	e7f9      	b.n	8004d46 <memset+0x4>
	...

08004d54 <__libc_init_array>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	4d0d      	ldr	r5, [pc, #52]	; (8004d8c <__libc_init_array+0x38>)
 8004d58:	4c0d      	ldr	r4, [pc, #52]	; (8004d90 <__libc_init_array+0x3c>)
 8004d5a:	1b64      	subs	r4, r4, r5
 8004d5c:	10a4      	asrs	r4, r4, #2
 8004d5e:	2600      	movs	r6, #0
 8004d60:	42a6      	cmp	r6, r4
 8004d62:	d109      	bne.n	8004d78 <__libc_init_array+0x24>
 8004d64:	4d0b      	ldr	r5, [pc, #44]	; (8004d94 <__libc_init_array+0x40>)
 8004d66:	4c0c      	ldr	r4, [pc, #48]	; (8004d98 <__libc_init_array+0x44>)
 8004d68:	f000 f818 	bl	8004d9c <_init>
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	2600      	movs	r6, #0
 8004d72:	42a6      	cmp	r6, r4
 8004d74:	d105      	bne.n	8004d82 <__libc_init_array+0x2e>
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7c:	4798      	blx	r3
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7ee      	b.n	8004d60 <__libc_init_array+0xc>
 8004d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d86:	4798      	blx	r3
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7f2      	b.n	8004d72 <__libc_init_array+0x1e>
 8004d8c:	08004ffc 	.word	0x08004ffc
 8004d90:	08004ffc 	.word	0x08004ffc
 8004d94:	08004ffc 	.word	0x08004ffc
 8004d98:	08005000 	.word	0x08005000

08004d9c <_init>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr

08004da8 <_fini>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr
